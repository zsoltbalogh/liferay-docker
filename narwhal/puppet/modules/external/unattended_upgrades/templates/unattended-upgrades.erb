// Automatically upgrade packages from these (origin:archive) pairs
//
// Note that in Ubuntu security updates may pull in new dependencies
// from non-security sources (e.g. chromium). By allowing the release
// pocket these get automatically pulled in.
Unattended-Upgrade::Origins-Pattern {
<% @origins.each do |origin| -%>
	"<%= origin %>";
<% end -%>
<% @extra_origins.each do |origin| -%>
	"<%= origin %>";
<% end -%>
};

// List of packages to not update (regexp are supported)
Unattended-Upgrade::Package-Blacklist {
<% @blacklist.each do |package| -%>
	"<%= package %>";
<% end -%>
};

<% unless @whitelist.empty? -%>
// List of pacakages to only update
Unattended-Upgrade::Package-Whitelist {
<% @whitelist.each do |package| -%>
	"<%= package %>";
<% end -%>
};
<% unless @whitelist_strict.nil? -%>
Unattended-Upgrade::Package-Whitelist-Strict "<%= @whitelist_strict %>";
<% end -%>
<% end -%>
// List of days in the week that updates should be applied.
// The days can be specified as localized abbreviated or full names.
// Or as integers where "0" is Sunday, "1" is Monday etc.
// Require Unattended-upgrades version >=0.91 to work, else it is ignored
Unattended-Upgrade::Update-Days {
<% @days.each do |day| -%>
	"<%= day.capitalize %>";
<% end -%>
};

// This option allows you to control if on a unclean dpkg exit
// unattended-upgrades will automatically run
//   dpkg --force-confold --configure -a
// The default is true, to ensure updates keep getting installed
Unattended-Upgrade::AutoFixInterruptedDpkg "<%= @_auto['fix_interrupted_dpkg'].to_s %>";

// Split the upgrade into the smallest possible chunks so that
// they can be interrupted with SIGTERM. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade
// is running is possible (with a small delay)
Unattended-Upgrade::MinimalSteps "<%= @minimal_steps.to_s %>";

// Install all unattended-upgrades when the machine is shuting down
// instead of doing it in the background while the machine is running
// This will (obviously) make shutdown slower
Unattended-Upgrade::InstallOnShutdown "<%= @install_on_shutdown.to_s %>";

<%- unless @_mail['to'].nil? -%>
// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you
// have a working mail setup on your system. A package that provides
// 'mailx' must be installed. E.g. "user@example.com"

Unattended-Upgrade::Mail "<%= @_mail['to'] %>";

<%- if @_mail['only_on_error'] -%>
// Set this value to "true" to get emails only on errors. Default
// is to always send a mail if Unattended-Upgrade::Mail is set
Unattended-Upgrade::MailOnlyOnError "<%= @_mail['only_on_error'].to_s %>";
<%- end -%>
<%- if @_mail['report'] -%>
// Set this value to one of:
//    "always", "only-on-error" or "on-change"
// If this is not set, then any legacy MailOnlyOnError (boolean) value
// is used to chose between "only-on-error" and "on-change"
Unattended-Upgrade::MailReport "<%= @_mail['report'] %>";
<%- end -%>
<%- end -%>

<%- if @sender -%>
// Use the specified value in the "From" field of outgoing mails.
// Defaults to "root"
Unattended-Upgrade::Sender "<%= @sender %>";

<%- end -%>
<%- unless @remove_unused_kernel.nil? -%>
// Remove unused automatically installed kernel-related packages
// (kernel images, kernel headers and kernel version locked tools).
Unattended-Upgrade::Remove-Unused-Kernel-Packages "<%= @remove_unused_kernel %>";
<%- end -%>

<%- unless @remove_new_unused_deps.nil? -%>
// Do automatic removal of newly unused dependencies after the upgrade
Unattended-Upgrade::Remove-New-Unused-Dependencies "<%= @remove_new_unused_deps %>";
<%- end -%>

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
Unattended-Upgrade::Remove-Unused-Dependencies "<%= @_auto['remove'].to_s %>";

// Automatically reboot *WITHOUT CONFIRMATION*
// if the file /var/run/reboot-required is found after the upgrade
Unattended-Upgrade::Automatic-Reboot "<%= @_auto['reboot'].to_s %>";

// Automatically reboot even if there are users currently logged in
// when Unattended-Upgrade::Automatic-Reboot is set to true
Unattended-Upgrade::Automatic-Reboot-WithUsers "<%= @_auto['reboot_withusers'].to_s %>";

// If automatic reboot is enabled and needed, reboot at the specific
// time instead of immediately
//  Default: "now"
Unattended-Upgrade::Automatic-Reboot-Time "<%= @_auto['reboot_time'].to_s %>";

<%- unless @dl_limit.nil? -%>
// Use apt bandwidth limit feature, this example limits the download
// speed to 70kb/sec
Acquire::http::Dl-Limit "<%= @dl_limit %>";
<%- end -%>

<%- unless @syslog_enable.nil? -%>
// Enable logging to syslog. Default is False
Unattended-Upgrade::SyslogEnable "<%= @syslog_enable %>";
<%- end -%>

<%- unless @syslog_facility.nil? -%>
// Specify syslog facility. Default is daemon
Unattended-Upgrade::SyslogFacility "<%= @syslog_facility %>";
<%- end -%>

<%- unless @only_on_ac_power.nil? -%>
// Download and install upgrades only on AC power
// (i.e. skip or gracefully stop updates on battery)
Unattended-Upgrade::OnlyOnACPower "<%= @only_on_ac_power %>";
<%- end -%>

<%- unless @allow_downgrade.nil? -%>
// Allow package downgrade if Pin-Priority exceeds 1000
Unattended-Upgrade::Allow-downgrade "<%= @allow_downgrade %>";
<%- end -%>
